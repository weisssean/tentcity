#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../server');
var debug = require('debug')('tentcity:server');
var http = require('http');
const sensor = require("../senseBME");


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3002');
app.set('port', port);

/**
 * Create HTTP server.
 */
//  const webSocketsServerPort = 8000;

var server = http.createServer(app);


const io = require("socket.io")(server);

/**
Set up socket connection to listen to event hub changes
*/
io.on("connection", _socket => {
  console.log("a user connected");
  sensor.init(_socket)
  // events.subscribe(_socket).catch(console.error);
});

io.on("disconnect", reason => {
  console.log("socket disconnect", reason);
  // close connection
  // events.disconnect();
});


// const wss = new WebSocket.Server({ httpServer: server, noServer: true, port: 8080  });
// server.listen(webSocketsServerPort);
// const wsServer = new webSocketServer({
//   httpServer: server
// });


// wss.on('connection', function connection(ws, request, client) {
//   console.log("Server", ws) 
//   console.log("Server", request) 
//   console.log("Server", client) 
//   console.log("Initializing sensor") 
//   sensor.init(wss);
//   wss.on('message', function message(msg) {
//     console.log(`Received message ${msg} from user ${client}`);
//   });
// });
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
